{"version":3,"sources":["data/ReefRepositoryV2Implement.ts","components/NewFolderDialog.tsx","components/UploadDialog.tsx","components/ReefBrowser.tsx","components/LoginForm.tsx","data/UserRepositoryImpl.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ReefRepositoryV2Implement","contractAddr","web3","contract","base","rpc","this","Web3","eth","Contract","contractABI","folderIdx","methods","getFolderListLength","call","arrayLength","promiseArray","i","push","getFolderList","Promise","all","IdxArray","length","getFolderName","NameArray","Result","tmp","name","getFolderExcelLength","getFolderExcel","excelArray","entry","console","log","getExcelLength","getExcel","uuid","size","lastModified","Date","fileUUID","fileName","axios","url","method","responseType","response","window","URL","createObjectURL","Blob","data","link","document","createElement","href","setAttribute","body","appendChild","click","removeChild","folderName","accessToken","post","parent","headers","Authorization","NewFolderDialog","doCreateFolder","open","setOpen","refresh","useState","setFolderName","loading","setLoading","errMsg","setErrMsg","handleClose","onLogin","loginResult","setTimeout","Dialog","onClose","DialogTitle","DialogContent","TextField","autoFocus","margin","label","fullWidth","variant","value","onChange","e","target","DialogContentText","color","red","A400","DialogActions","Button","onClick","disabled","type","uppy","Uppy","restrictions","maxNumberOfFiles","use","XHRUpload","endpoint","allowedMetaFields","file","meta","on","error","info","UploadDialog","folder","folderFiles","useEffect","handler","uppyFile","isNew","newName","find","fileData","removeFile","id","setFileMeta","JSON","stringify","tag","folderNode","index","off","result","txHash","closeModalOnClickOutside","onRequestClose","setChonkyDefaults","iconComponent","ChonkyIconFA","disableDragAndDrop","refreshAction","defineFileAction","hotkeys","button","toolbar","contextMenu","icon","ChonkyIconName","updateFolderFiles","reefRepository","setFolderFiles","setSnackbarInfo","subFolders","listFolders","subFiles","listFolderFiles","then","res","folders","map","subFolder","toString","isDir","files","subFile","concat","catch","err","message","severity","updateVersionFiles","setVersionFiles","listFiles","reefFiles","versionFiles","reefFile","idx","modDate","ReefBrowser","props","snackbarInfo","hashDialogInfo","setHashDialogInfo","openUploadDialog","setOpenUploadDialog","openCreateFolderDialog","setOpenCreateFolderDialog","path","setFolder","setFile","createFolder","loginState","folderChain","useMemo","p","useFolderChain","handleFileAction","isInFile","useCallback","ChonkyActions","OpenFiles","payload","targetFile","fileToOpen","isParent","entries","slice","parseInt","hash","split","downloaded","filename","downloadFile","UploadFiles","CreateFolder","useFileActionHandler","fileActions","isAdmin","style","height","instanceId","onFileAction","defaultFileViewActionId","EnableListView","Snackbar","autoHideDuration","ClickAwayListenerProps","onClickAway","Alert","sx","width","maxWidth","rel","LoginForm","doLogin","username","setUsername","password","setPassword","UserRepositoryImpl","userRepository","App","login","setLogin","loginOpen","setLoginOpen","userMenuOpen","setUserMenuOpen","userButtonRef","useRef","jose","user","sessionStorage","setItem","isAxiosError","savedLogin","getItem","loadLogin","Box","flexGrow","AppBar","position","Toolbar","IconButton","edge","mr","Typography","component","endIcon","ref","borderColor","lightingColor","Menu","anchorEl","current","MenuListProps","MenuItem","removeItem","padding","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render"],"mappings":"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","file":"static/js/main.4a5e5a71.chunk.js","sourcesContent":["import { ReefFile, ReefFolderV2, ReefRepositoryV2, ReefFileEntry } from \"./ReefRepository\";\nimport { AbiItem } from 'web3-utils'\nimport Web3 from 'web3';\nimport { Contract } from \"web3-eth-contract\"\nimport contractABI from './abiV2.json'\nimport axios from 'axios';\n\nexport class ReefRepositoryV2Implement implements ReefRepositoryV2 {\n\tcontractAddr = \"0x5308132EB6826ef1FCC8B1F1f31f0675bC8Fc646\"\n    web3: Web3;\n    contract: Contract;\n\n    base = \"https://quorum-blockchain.yikuo.dev/api/\";\n    rpc = \"https://rpc.quorum-blockchain.yikuo.dev/\"\n\n    constructor() {\n        this.web3 = new Web3(this.rpc);\n        this.contract = new this.web3.eth.Contract( contractABI as AbiItem[], this.contractAddr);\n    }\n    \n\tasync listFolders(folderIdx: number): Promise<ReefFolderV2[]> {\n\t\tlet arrayLength = await this.contract.methods.getFolderListLength(folderIdx).call();\n\t\tlet promiseArray = [];\n        for (let i = 0; i < arrayLength ; i++) {\n            promiseArray.push(this.contract.methods.getFolderList(folderIdx, i).call());\n        }\n        let IdxArray = await Promise.all(promiseArray);\n\t\tpromiseArray = [];\n\t\tfor (let i = 0; i < IdxArray.length; i ++){\n\t\t\tpromiseArray.push(this.contract.methods.getFolderName(IdxArray[i]).call())\n\t\t}\n\t\tlet NameArray = await Promise.all(promiseArray);\n\t\tlet Result: ReefFolderV2[] = []\n\t\tfor (let i = 0; i < IdxArray.length; i++){\n\t\t\tlet tmp = {\n\t\t\t\tfolderIdx: IdxArray[i],\n\t\t\t\tname: NameArray[i],\n\t\t\t}\n\t\t\tResult.push(tmp);\n\t\t}\n\t\treturn Result;\n\t}\n\tasync listFolderFiles(folderIdx: number): Promise<ReefFileEntry[]>{\n\t\tlet arrayLength = await this.contract.methods.getFolderExcelLength(folderIdx).call();\n\t\tlet promiseArray = [];\n        for (let i = 0; i < arrayLength ; i++) {\n            promiseArray.push(this.contract.methods.getFolderExcel(folderIdx, i).call());\n        }\n        let excelArray = await Promise.all(promiseArray);\n\t\tlet Result: ReefFileEntry[] = []\n\t\tfor (let i = 0; i < excelArray.length; i++){\n\t\t\tlet tmp = {\n\t\t\t\tfolderIdx: folderIdx,\n\t\t\t\tname: excelArray[i],\n\t\t\t}\n\t\t\tResult.push(tmp);\n\t\t}\n\t\treturn Result;\n\t}\n\tasync listFiles(entry: ReefFileEntry): Promise<ReefFile[]>{\n        console.log(entry.folderIdx)\n        console.log(entry.name)\n        let arrayLength = await this.contract.methods.getExcelLength(entry.folderIdx, entry.name).call()\n        console.log(\"TEST:\", arrayLength)\n        let promiseArray = [];\n        for (let i = 0 ; i < arrayLength ; i++) {\n            promiseArray.push(this.contract.methods.getExcel(entry.folderIdx, entry.name, i).call());\n        }\n        let excelArray = await Promise.all(promiseArray);\n\t\tlet Result: ReefFile[] = [];\n        for (let i = 0 ; i < excelArray.length ; i++){\n            let tmp = {\n                uuid: excelArray[i][\"cid\"],\n                name: entry.name,\n                size: +excelArray[i][\"size\"],\n                lastModified: new Date(+excelArray[i][\"time\"])\n            }\n            Result.push(tmp);\n        }\n        return Result;\n\t}\n\tasync downloadFile(fileUUID: string, fileName: string): Promise<void>{\n        const response = await axios({\n            url: this.base + `data/${fileUUID}/download` ,\n            method: 'GET',\n            responseType: 'blob'\n        });\n\n        const url = window.URL.createObjectURL(new Blob([response.data]));\n        const link = document.createElement('a');\n        link.href = url;\n        link.setAttribute('download', fileName);\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n\t}\n\n    async createFolder(folderIdx: number, folderName: string, accessToken: string | undefined): Promise<void> {\n        try {\n            await axios.post(\n                this.base + 'folders',\n                {\n                    parent: folderIdx,\n                    name: folderName\n                },\n                {\n                    headers: {\n                        Authorization: `Bearer ${accessToken}`,\n                    }\n                }\n            );\n        } catch (err) {\n            throw(err)\n        }\n    }\n}\n","import * as React from 'react';\nimport Button from '@mui/material/Button';\nimport TextField from '@mui/material/TextField';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport { Dispatch, SetStateAction, useState } from 'react';\nimport { DialogContentText } from '@mui/material';\nimport { red } from '@mui/material/colors';\n\nexport const NewFolderDialog: React.FC<{\n    doCreateFolder: (folderName: string) => Promise<string | null>,\n    open: boolean,\n    setOpen: Dispatch<SetStateAction<boolean>>,\n    refresh: () => void\n  }> = ({doCreateFolder, open, setOpen, refresh}) => {\n\n  const [folderName, setFolderName] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n\n  const [errMsg, setErrMsg] = useState<string | null>(null);\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const onLogin = async () => {\n    setLoading(true);\n\n    const loginResult = await doCreateFolder(folderName);\n    \n    if (loginResult !== null) { // Login fails\n      setErrMsg(loginResult as string);\n    } else { // success\n      setOpen(false);\n      setTimeout(refresh, 3000);\n      setFolderName(\"\");\n    }\n\n    setLoading(false);\n  };\n\n  return (\n    <div>\n      <Dialog open={open} onClose={handleClose}>\n        <DialogTitle>New Folder</DialogTitle>\n        <DialogContent>\n          <TextField\n            autoFocus\n            margin=\"dense\"\n            label=\"Folder Name\"\n            fullWidth\n            variant=\"standard\"\n            value={folderName}\n            onChange={(e) => setFolderName(e.target.value)}\n          />\n          {\n            errMsg && \n              <DialogContentText\n                color={red.A400}\n              >\n                  {errMsg}\n              </DialogContentText>\n          }\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose}>Close</Button>\n          <Button\n            variant=\"contained\"\n            onClick={onLogin}\n            disabled={loading}\n            type=\"submit\"\n          >\n            Create\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}","import Uppy, { SuccessResponse, UppyFile } from '@uppy/core'\nimport XHRUpload from '@uppy/xhr-upload'\nimport { DashboardModal } from '@uppy/react'\nimport '@uppy/core/dist/style.css'\nimport '@uppy/dashboard/dist/style.css'\nimport React, { Dispatch, SetStateAction, useEffect } from 'react';\n\nimport { ReefFileEntry } from '../data/ReefRepository';\nimport { Folder } from './ReefBrowser'\nimport { FileArray } from 'chonky'\n\nconst base = \"https://quorum-blockchain.yikuo.dev/api/\";\nconst endpoint = base + \"data\"\n\nconst uppy = new Uppy({\n    restrictions: {\n      maxNumberOfFiles: 1\n    },\n  })\n  .use(XHRUpload, {\n    endpoint: endpoint,\n    allowedMetaFields: ['meta'],\n    headers: (file: UppyFile) => {\n      return {\n        Authorization: `Bearer ${file.meta.accessToken}`,\n      }\n    }\n  })\n\n\nuppy.on('upload-error', (file, error, response) => {\n  if (response)\n    uppy.info(response.body, 'error');\n})\n\nexport const UploadDialog: React.FC<{\n    open: boolean,\n    setOpen: Dispatch<SetStateAction<boolean>>,\n    folder: Folder,\n    folderFiles: FileArray,\n    file: ReefFileEntry | null,\n    accessToken: string | undefined,\n    refresh: () => void\n}> = ({open, setOpen, folder, folderFiles, file, accessToken, refresh}) => {\n  useEffect(() => {\n    const handler = (uppyFile: UppyFile) => {\n      const isNew = file === null;\n  \n      let newName = uppyFile.name;\n  \n      if (isNew) {\n        if (folderFiles.find((fileData) => fileData?.name === uppyFile.name)) {\n          uppy.removeFile(uppyFile.id);\n          uppy.info(\"Same file exists!\", 'error');\n        }\n      } else {\n        if (uppyFile.name !== file.name) {\n          uppy.info(`Renamed as ${file.name}`, 'warning');\n          newName = file.name;\n        }\n      }\n  \n      uppy.setFileMeta(uppyFile.id, {\n        name: newName,\n        meta: JSON.stringify({\n          tag: 0,\n          name: newName,\n          folderNode: folder.index,\n          isNew: isNew\n        }),\n        accessToken: accessToken\n      })\n    }\n\n    \n\n    uppy.on('file-added', handler);\n\n    // Cleanup\n    return () => {\n      uppy.off('file-added', handler);\n    };\n  }, [folder, folderFiles, file, accessToken]);\n\n  useEffect(() => {\n    const handler = (file: any, response: SuccessResponse) => {\n      const result = response.body\n      uppy.info(`File uploading...\\nTx hash: ${result.txHash}`)\n      setTimeout(refresh, 3000);\n    }\n\n    uppy.on('upload-success', handler);\n\n    // Cleanup\n    return () => {\n      uppy.off('upload-success', handler);\n    };\n  }, [refresh])\n\n  const onClose = () => {\n    setOpen(false);\n  }\n\n  return (\n    <div>\n      <DashboardModal\n          uppy={uppy}\n          closeModalOnClickOutside\n          open={open}\n          onRequestClose={onClose}\n      />\n    </div>\n  );\n}\n\n"," import { Alert, AlertColor, Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, Snackbar } from '@mui/material';\nimport {\n    ChonkyActions,\n    ChonkyFileActionData,\n    ChonkyIconName,\n    defineFileAction,\n    FileAction,\n    FileArray,\n    FileBrowser,\n    FileContextMenu,\n    FileList,\n    FileNavbar,\n    FileToolbar,\n    setChonkyDefaults,\n} from 'chonky';\nimport { ChonkyIconFA } from 'chonky-icon-fontawesome';\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { ReefFile, ReefFileEntry, ReefFolderV2, ReefRepositoryV2 } from '../data/ReefRepository';\nimport { LoginState } from '../data/UserRepository';\nimport { NewFolderDialog } from './NewFolderDialog';\nimport { UploadDialog } from './UploadDialog';\n\nsetChonkyDefaults({\n    iconComponent: ChonkyIconFA,\n    disableDragAndDrop: true\n});\n\nconst refreshAction = defineFileAction({\n    id: 'Refresh',\n    hotkeys: ['ctrl+r'],\n    button: {\n        name: 'Refresh',\n        toolbar: true,\n        contextMenu: true,\n        icon: ChonkyIconName.loading\n    },\n})\n\ninterface Path {\n    index: number,\n    name: string\n}\n\nexport interface Folder {\n    path: Path[],\n    index: number\n}\n\ninterface SnackBarInfo {\n    message: string,\n    severity: AlertColor\n}\n\ninterface HashDialogInfo {\n    downloaded: boolean,\n    filename: string,\n    hash: string\n}\n\nexport const useFolderChain = (folder: Folder, file: ReefFileEntry | null): FileArray => {\n    return useMemo(() => {\n        const folderChain: FileArray = folder.path.map((p: Path) => {\n            return {\n                id: p.index.toString(),\n                name: p.name,\n                isDir: true\n            };\n        });\n\n        if (file != null) {\n            folderChain.push({\n                id: `${file.folderIdx}/${file.name}`,\n                name: file.name + \" (History)\",\n                isDir: false\n            })\n        }\n\n        console.log(folderChain);\n        return folderChain;\n    }, [folder, file]);\n};\n\nexport const useFileActionHandler = (\n    reefRepository: ReefRepositoryV2,\n    isInFile: boolean,\n    folder: Folder,\n    setSnackbarInfo: (snackbarInfo: SnackBarInfo) => void,\n    setFolder: (folder: Folder) => void,\n    setFile: (file: ReefFileEntry | null) => void,\n    setHashDialogInfo: (hashDialogInfo: HashDialogInfo | null) => void,\n    setOpenUploadDialog: (openUploadDialog: boolean) => void,\n    setOpenCreateFolderDialog: (openUploadDialog: boolean) => void,\n    refresh: () => void\n) => {\n    return useCallback(\n        (data: ChonkyFileActionData) => {\n            if (data.id === ChonkyActions.OpenFiles.id) {\n                const { targetFile, files } = data.payload;\n                const fileToOpen = targetFile ?? files[0];\n                console.log(fileToOpen);\n\n                if (fileToOpen) {\n                    if (fileToOpen.isDir) {\n                        // Check if going back to parent\n                        let isParent = false;\n                        for (const [i, path] of folder.path.entries()) {\n                            if (path.index.toString() === fileToOpen.id) {\n                                isParent = true;\n\n                                setFolder({\n                                    path: folder.path.slice(0, i + 1),\n                                    index: parseInt(fileToOpen.id)\n                                });\n                                setFile(null);\n                                break;\n                            }\n                        }\n\n                        // Otherwise, advance in deeper folder\n                        if (!isParent) {\n                            setFolder({\n                                path: [...folder.path, {\n                                    index: parseInt(fileToOpen.id),\n                                    name: fileToOpen.name\n                                }],\n                                index: parseInt(fileToOpen.id)\n                            });\n                            setFile(null);\n                        }\n                    } else {\n                        if (isInFile) {\n                            setSnackbarInfo({\n                                message: \"The file is now downloading...\",\n                                severity: 'info'\n                            });\n\n                            const hash = fileToOpen.id.split(\":\", 2)[1];\n                            \n                            setHashDialogInfo({\n                                downloaded: false,\n                                filename: fileToOpen.name,\n                                hash: hash\n                            });\n\n                            reefRepository.downloadFile(hash, fileToOpen.name)\n                                .then(() => {\n                                    setHashDialogInfo({\n                                        downloaded: true,\n                                        filename: fileToOpen.name,\n                                        hash: hash\n                                    });\n                                    setSnackbarInfo({\n                                        message: \"The file is downloaded.\",\n                                        severity: 'success'\n                                    });\n                                })\n                                .catch((err) => {\n                                    console.log(err);\n                                    setHashDialogInfo(null)\n                                    setSnackbarInfo({\n                                        message: `Download failed: ${err}`,\n                                        severity: 'error'\n                                    });\n                                })\n                        } else {\n                            const [idx] = fileToOpen.id.split(\"/\", 1);\n                            const name = fileToOpen.name;\n\n                            setFile({\n                                folderIdx: parseInt(idx),\n                                name: name\n                            });\n                        }\n                    }\n                }\n            } else if (data.id === ChonkyActions.UploadFiles.id) {\n                setOpenUploadDialog(true);\n            } else if (data.id === ChonkyActions.CreateFolder.id) {\n                setOpenCreateFolderDialog(true);\n            } else if (data.id === refreshAction.id) {\n                refresh();\n            }\n\n            console.log(data);\n        },\n        [folder.path, setFolder, setFile, isInFile, setSnackbarInfo, setHashDialogInfo, reefRepository, setOpenUploadDialog, setOpenCreateFolderDialog, refresh]\n    );\n};\n\nexport const updateFolderFiles = (\n    reefRepository: ReefRepositoryV2,\n    folder: Folder,\n    setFolderFiles: (folderFiles: FileArray) => void,\n    setSnackbarInfo: (snackbarInfo: SnackBarInfo) => void,\n) => {\n    setFolderFiles([null]);\n\n    const subFolders = reefRepository.listFolders(folder.index);\n    const subFiles = reefRepository.listFolderFiles(folder.index);\n\n    Promise.all([subFolders, subFiles]).then((res) => {\n            const subFolders = res[0];\n            const subFiles= res[1];\n\n            const folders: FileArray = subFolders.map((subFolder: ReefFolderV2) => {\n                return {\n                    id: subFolder.folderIdx.toString(),\n                    name: subFolder.name,\n                    isDir: true\n                };\n            });\n\n            const files: FileArray = subFiles.map((subFile: ReefFileEntry) => {\n                return {\n                    id: `${subFile.folderIdx}/${subFile.name}`,\n                    name: subFile.name,\n                    isDir: false\n                };\n            });\n\n            console.log(folders.concat(files));\n            setFolderFiles(folders.concat(files));\n        })\n        .catch((err: any) => {\n            console.log(err);\n            setSnackbarInfo({\n                message: `${err}`,\n                severity: 'error'\n            });\n        });\n}\n\nexport const updateVersionFiles = (\n    reefRepository: ReefRepositoryV2,\n    file: ReefFileEntry | null,\n    setVersionFiles: (versionFiles: FileArray | null) => void,\n    setSnackbarInfo: (snackbarInfo: SnackBarInfo) => void,\n) => {\n    if (file == null) {\n        setVersionFiles(null);\n    } else {\n        setVersionFiles([null]);\n        reefRepository.listFiles(file)\n            .then((reefFiles: ReefFile[]) => {\n                const versionFiles: FileArray = reefFiles.map((reefFile: ReefFile, idx: number) => {\n                    return {\n                        id: `${idx}:${reefFile.uuid}`,\n                        name: reefFile.name,\n                        modDate: reefFile.lastModified,\n                        size: reefFile.size,\n                        isDir: false\n                    }\n                })\n\n                setVersionFiles(versionFiles);\n            })\n            .catch((err: any) => {\n                console.log(err);\n                setSnackbarInfo({\n                    message: `${err}`,\n                    severity: 'error'\n                });\n            });\n    }\n}\n\n\nexport const ReefBrowser: React.FC<{\n    instanceId: string,\n    reefRepository: ReefRepositoryV2,\n    loginState: LoginState | null\n}> = (props) => {\n\n    const [snackbarInfo, setSnackbarInfo] = useState(null as (SnackBarInfo | null));\n    const [hashDialogInfo, setHashDialogInfo] = useState(null as (HashDialogInfo | null));\n    \n    const [openUploadDialog, setOpenUploadDialog] = useState(false);\n    const [openCreateFolderDialog, setOpenCreateFolderDialog] = useState(false);\n\n    const [folder, setFolder] = useState({\n        path: [{\n            index: 0,\n            name: 'Root'\n        }],\n        index: 0\n    } as Folder);\n    const [file, setFile] = useState(null as (ReefFileEntry | null));\n\n    const refresh = () => {\n        if (file)\n            updateVersionFiles(props.reefRepository, file, setVersionFiles, setSnackbarInfo);\n        else\n            updateFolderFiles(props.reefRepository, folder, setFolderFiles, setSnackbarInfo);\n    }\n\n    const doCreateFolder = async (folderName: string) => {\n        if (folderName.length === 0)\n            return \"Empty name not allowed!\"\n        if (folderFiles.find((fileData) => fileData?.name === folderName))\n            return \"Name already exists!\";\n        try {\n            await props.reefRepository.createFolder(folder.index, folderName, props.loginState?.accessToken);\n            return null;\n        } catch (e) {\n            return `${e}`;\n        }\n    }\n\n    const [folderFiles, setFolderFiles] = useState([null] as FileArray);\n    useEffect(() => {\n        updateFolderFiles(props.reefRepository, folder, setFolderFiles, setSnackbarInfo);\n    }, [folder, props.reefRepository])\n\n    const [versionFiles, setVersionFiles] = useState(null as (FileArray | null));\n    useEffect(() => {\n        updateVersionFiles(props.reefRepository, file, setVersionFiles, setSnackbarInfo);\n    }, [file, props.reefRepository])\n\n    const folderChain = useFolderChain(folder, file);\n    const handleFileAction = useFileActionHandler(\n        props.reefRepository,\n        file != null,\n        folder,\n        setSnackbarInfo,\n        setFolder,\n        setFile,\n        setHashDialogInfo,\n        setOpenUploadDialog,\n        setOpenCreateFolderDialog,\n        refresh\n    );\n\n    const fileActions: FileAction[] = [refreshAction];\n    if (props.loginState && props.loginState.isAdmin) {\n        fileActions.push(ChonkyActions.UploadFiles);\n\n        if (!file)\n            fileActions.push(ChonkyActions.CreateFolder);\n    }\n\n    return (\n        <div style={{ height: '80vh' }}>\n            <FileBrowser\n                instanceId={props.instanceId}\n                files={versionFiles ?? folderFiles}\n                folderChain={folderChain}\n                fileActions={fileActions}\n                onFileAction={handleFileAction}\n                defaultFileViewActionId={ChonkyActions.EnableListView.id}\n            >\n                <FileNavbar />\n                <FileToolbar />\n                <FileList />\n                <FileContextMenu />\n            </FileBrowser>\n\n            <Snackbar\n                open={snackbarInfo !== null}\n                autoHideDuration={5000}\n                onClose={() => { setSnackbarInfo(null) }}\n                ClickAwayListenerProps={{onClickAway: () => {}}}\n            >\n                <Alert\n                    onClose={() => { setSnackbarInfo(null) }}\n                    severity={snackbarInfo?.severity}\n                    sx={{ width: '100%' }}\n                >\n                    {snackbarInfo?.message}\n                </Alert>\n            </Snackbar>\n\n            <UploadDialog\n                open={openUploadDialog}\n                setOpen={setOpenUploadDialog}\n                folder={folder}\n                folderFiles={folderFiles}\n                file={file}\n                accessToken={props.loginState?.accessToken}\n                refresh={() => refresh()}\n            />\n            \n            <NewFolderDialog\n                doCreateFolder={async (folderName) => doCreateFolder(folderName)}\n                open={openCreateFolderDialog}\n                setOpen={setOpenCreateFolderDialog}\n                refresh={() => refresh()}\n            />\n\n            <Dialog\n                open={hashDialogInfo !== null}\n                maxWidth={false}\n                onClose={() => setHashDialogInfo(null)}\n                aria-labelledby=\"alert-dialog-title\"\n                aria-describedby=\"alert-dialog-description\"\n            >\n                <DialogTitle>\n                    Hash Digest\n                </DialogTitle>\n                <DialogContent>\n                    <DialogContentText>\n                        The file <b>{hashDialogInfo?.filename}</b> is {hashDialogInfo?.downloaded? \"downloaded\": \"now downloading...\"}.\n                    </DialogContentText>\n                    <DialogContentText>\n                        The integrity of the file could be checked by comparing the <code>sha256</code> digest.\n                    </DialogContentText>\n                    <br />\n                    <DialogContentText>\n                        <b><code>{hashDialogInfo?.hash}</code></b>\n                    </DialogContentText>\n                    <br />\n                    <DialogContentText>\n                        You can use <a href='https://emn178.github.io/online-tools/sha256_checksum.html' target=\"_blank\" rel=\"noreferrer\">this online tool</a> to compute the hash digest.\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button\n                        disabled={!hashDialogInfo?.downloaded}\n                        onClick={() => setHashDialogInfo(null)}\n                        autoFocus\n                    >\n                        Close\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </div>\n    );\n};","import * as React from 'react';\nimport Button from '@mui/material/Button';\nimport TextField from '@mui/material/TextField';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport { LoginState } from '../data/UserRepository';\nimport { Dispatch, SetStateAction, useState } from 'react';\nimport { DialogContentText } from '@mui/material';\nimport { red } from '@mui/material/colors';\n\nexport const LoginForm: React.FC<{\n    doLogin: (username: string, password: string) => Promise<string | LoginState>,\n    open: boolean,\n    setOpen: Dispatch<SetStateAction<boolean>>,\n}> = ({doLogin, open, setOpen}) => {\n\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n\n  const [errMsg, setErrMsg] = useState<string | null>(null);\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const onLogin = async () => {\n    setLoading(true);\n\n    const loginResult = await doLogin(username, password);\n    \n    if (typeof loginResult === 'string') { // Login fails\n      setErrMsg(loginResult as string);\n    } else { // success\n      setOpen(false);\n    }\n\n    setLoading(false);\n  };\n\n  return (\n    <div>\n      <Dialog open={open} onClose={handleClose}>\n        <DialogTitle>Login</DialogTitle>\n        <DialogContent>\n          <TextField\n            autoFocus\n            margin=\"dense\"\n            label=\"Username\"\n            type=\"email\"\n            fullWidth\n            variant=\"standard\"\n            value={username}\n            onChange={(e) => setUsername(e.target.value)}\n          />\n          <TextField\n            margin=\"dense\"\n            label=\"Password\"\n            type=\"password\"\n            fullWidth\n            variant=\"standard\"\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n          />\n          {\n            errMsg && \n              <DialogContentText\n                color={red.A400}\n              >\n                  {errMsg}\n              </DialogContentText>\n          }\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose}>Close</Button>\n          <Button\n            variant=\"contained\"\n            onClick={onLogin}\n            disabled={loading}\n            type=\"submit\"\n          >\n            Login\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}","import axios from \"axios\";\nimport { UserRepository } from \"./UserRepository\";\n\nexport class UserRepositoryImpl implements UserRepository {\n  \n  base = \"https://quorum-blockchain.yikuo.dev/api/\";\n  \n  async login(username: string, password: string): Promise<string> {\n    try {\n      const response = await axios.post(\n          this.base + 'auth/login',\n          {\n            username: username,\n            password: password\n          }\n        );\n      \n      return response.data.accessToken;\n    } catch (err) {\n        throw(err)\n    }\n  }\n}\n  ","import React, { useState, useEffect, useRef } from 'react';\nimport { ReefRepositoryV2Implement } from './data/ReefRepositoryV2Implement'\nimport { AppBar, Box, Toolbar, IconButton, Typography, Button, Menu, MenuItem } from '@mui/material';\nimport GrassIcon from '@mui/icons-material/Grass';\nimport AccountCircleIcon from '@mui/icons-material/AccountCircle';\nimport { ReefBrowser } from './components/ReefBrowser';\nimport { LoginForm } from './components/LoginForm';\nimport { LoginState } from './data/UserRepository';\nimport { UserRepositoryImpl } from './data/UserRepositoryImpl';\nimport * as jose from 'jose'\nimport axios from 'axios';\n\n\n\nconst reefRepository = new ReefRepositoryV2Implement()\nconst userRepository = new UserRepositoryImpl()\n\nfunction App() {\n  // let repository = new ReefRepositoryImplement()\n\n  const [login, setLogin] = useState<LoginState| null>(null);\n\n  const [loginOpen, setLoginOpen] = useState(false);\n\n  const [userMenuOpen, setUserMenuOpen] = useState(false);\n  const userButtonRef = useRef(null);\n\n  const doLogin = async (username: string, password: string): Promise<string | LoginState> => {\n    try {\n      const accessToken = await userRepository.login(username, password);\n  \n      const {user, isAdmin} = jose.decodeJwt(accessToken);\n  \n      sessionStorage.setItem('accessToken', accessToken);\n      const loginState = {\n        accessToken: accessToken,\n        username: user as string,\n        isAdmin: isAdmin as boolean\n      };\n\n      setLogin(loginState);\n      return loginState;\n    } catch (err) {\n      if (axios.isAxiosError(err)) {\n        console.log(err)\n        if (err.message === 'Network Error')\n          return err.message;\n        else\n          return (err.response!.data as any).message;\n      } else {\n        return `${err}`;\n      }\n    }\n  }\n\n  const doLogout = () => {\n    setLogin(null);\n    sessionStorage.removeItem('accessToken');\n    setUserMenuOpen(false)\n  }\n\n  const loadLogin = (): LoginState | null => {\n    const accessToken = sessionStorage.getItem('accessToken');\n    if (accessToken === null)\n      return null;\n  \n    const {user, isAdmin} = jose.decodeJwt(accessToken);\n    \n    return {\n      accessToken: accessToken,\n      username: user as string,\n      isAdmin: isAdmin as boolean\n    };\n  }\n\n  useEffect(() => {\n    const savedLogin = loadLogin();\n    if (savedLogin !== null)\n      setLogin(savedLogin);\n  }, [])\n\n  const onUserButtonClick = () => {\n    if (login === null)\n      setLoginOpen(true)\n    else\n      setUserMenuOpen(true);\n  }\n\n  return (\n    <Box sx={{ flexGrow: 1 }}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton\n            size=\"large\"\n            edge=\"start\"\n            color=\"inherit\"\n            aria-label=\"menu\"\n            sx={{ mr: 2 }}\n          >\n            <GrassIcon />\n          </IconButton>\n          <Typography variant=\"h6\" component=\"div\" sx={{ flexGrow: 1 }}>\n            Reef Blockchain Explorer\n          </Typography>\n\n          <Button \n            variant=\"outlined\"\n            endIcon={<AccountCircleIcon />}\n            onClick={onUserButtonClick}\n            ref={userButtonRef}\n            style={{\n              color: \"white\",\n              borderColor: \"white\",\n              lightingColor: \"red\"\n            }}>\n            {\n              login? `Welcome, ${login.username}!`: \"Login\"\n            }\n          </Button>\n          <Menu\n            id=\"basic-menu\"\n            anchorEl={userButtonRef.current}\n            open={userMenuOpen}\n            MenuListProps={{\n              'aria-labelledby': 'basic-button',\n            }}\n            onClose={() => setUserMenuOpen(false)}\n          >\n            <MenuItem onClick={() => doLogout()}>Logout</MenuItem>\n          </Menu>\n        </Toolbar>\n      </AppBar>\n      <div style={{ padding: 32 }}>\n        <ReefBrowser instanceId=\"reef-browser\" reefRepository={reefRepository} loginState={login} />\n      </div>\n\n      <LoginForm\n        doLogin={doLogin}\n        open={loginOpen}\n        setOpen={setLoginOpen}\n      />\n    </Box>\n  );\n}\n\nexport default App;\n\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport { setChonkyDefaults } from 'chonky';\nimport { ChonkyIconFA } from 'chonky-icon-fontawesome';\n\nsetChonkyDefaults({ iconComponent: ChonkyIconFA });\n\nconst root = ReactDOM.createRoot(\n  document.getElementById('root') as HTMLElement\n);\nroot.render(\n  <App />\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}