{"version":3,"sources":["data/ReefRepositoryV2Implement.ts","components/ReefBrowser.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ReefRepositoryV2Implement","contractAddr","web3","contract","base","rpc","this","Web3","eth","Contract","contractABI","folderIdx","methods","getFolderListLength","call","arrayLength","promiseArray","i","push","getFolderList","Promise","all","IdxArray","length","getFolderName","NameArray","Result","tmp","name","getFolderExcelLength","getFolderExcel","excelArray","entry","getExcelLength","console","log","getExcel","uuid","size","lastModified","Date","fileUUID","fileName","axios","url","method","responseType","then","response","window","URL","createObjectURL","Blob","data","link","document","createElement","href","setAttribute","body","appendChild","click","removeChild","setChonkyDefaults","iconComponent","ChonkyIconFA","ReefBrowser","props","useState","snackbarInfo","setSnackbarInfo","path","index","folder","setFolder","file","setFile","folderFiles","setFolderFiles","useEffect","reefRepository","subFolders","listFolders","subFiles","listFolderFiles","res","folders","map","subFolder","id","toString","isDir","files","subFile","concat","catch","err","message","severity","updateFolderFiles","versionFiles","setVersionFiles","listFiles","reefFiles","reefFile","modDate","updateVersionFiles","folderChain","useMemo","p","useFolderChain","handleFileAction","isInFile","useCallback","ChonkyActions","OpenFiles","payload","targetFile","fileToOpen","isParent","entries","slice","parseInt","downloadFile","split","idx","useFileActionHandler","style","height","instanceId","onFileAction","defaultFileViewActionId","EnableListView","Snackbar","open","autoHideDuration","onClose","ClickAwayListenerProps","onClickAway","Alert","sx","width","App","repository","Box","flexGrow","AppBar","position","Toolbar","IconButton","edge","color","mr","Typography","variant","component","padding","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render"],"mappings":"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","file":"static/js/main.76aa914f.chunk.js","sourcesContent":["import { ReefFile, ReefFolderV2, ReefRepositoryV2, ReefFileEntry } from \"./ReefRepository\";\nimport { AbiItem } from 'web3-utils'\nimport Web3 from 'web3';\nimport { Contract } from \"web3-eth-contract\"\nimport contractABI from './abiV2.json'\nimport axios from 'axios';\n\nexport class ReefRepositoryV2Implement implements ReefRepositoryV2 {\n\tcontractAddr = \"0xa1BCe629767D23cb719990FB8aDF54a2B4Da41d1\"\n    web3: Web3;\n    contract: Contract;\n\n    base = \"https://quorum-blockchain.yikuo.dev/api/\";\n    rpc = \"https://rpc.quorum-blockchain.yikuo.dev/\"\n\n    constructor() {\n        this.web3 = new Web3(this.rpc);\n        this.contract = new this.web3.eth.Contract( contractABI as AbiItem[], this.contractAddr);\n    }\n\t\n\tasync listFolders(folderIdx: number): Promise<ReefFolderV2[]> {\n\t\tlet arrayLength = await this.contract.methods.getFolderListLength(folderIdx).call();\n\t\tlet promiseArray = [];\n        for (let i = 0; i < arrayLength ; i++) {\n            promiseArray.push(this.contract.methods.getFolderList(folderIdx, i).call());\n        }\n        let IdxArray = await Promise.all(promiseArray);\n\t\tpromiseArray = [];\n\t\tfor (let i = 0; i < IdxArray.length; i ++){\n\t\t\tpromiseArray.push(this.contract.methods.getFolderName(IdxArray[i]).call())\n\t\t}\n\t\tlet NameArray = await Promise.all(promiseArray);\n\t\tlet Result: ReefFolderV2[] = []\n\t\tfor (let i = 0; i < IdxArray.length; i++){\n\t\t\tlet tmp = {\n\t\t\t\tfolderIdx: IdxArray[i],\n\t\t\t\tname: NameArray[i],\n\t\t\t}\n\t\t\tResult.push(tmp);\n\t\t}\n\t\treturn Result;\n\t}\n\tasync listFolderFiles(folderIdx: number): Promise<ReefFileEntry[]>{\n\t\tlet arrayLength = await this.contract.methods.getFolderExcelLength(folderIdx).call();\n\t\tlet promiseArray = [];\n        for (let i = 0; i < arrayLength ; i++) {\n            promiseArray.push(this.contract.methods.getFolderExcel(folderIdx, i).call());\n        }\n        let excelArray = await Promise.all(promiseArray);\n\t\tlet Result: ReefFileEntry[] = []\n\t\tfor (let i = 0; i < excelArray.length; i++){\n\t\t\tlet tmp = {\n\t\t\t\tfolderIdx: folderIdx,\n\t\t\t\tname: excelArray[i],\n\t\t\t}\n\t\t\tResult.push(tmp);\n\t\t}\n\t\treturn Result;\n\t}\n\tasync listFiles(entry: ReefFileEntry): Promise<ReefFile[]>{\n        \n        let arrayLength = await this.contract.methods.getExcelLength(entry.folderIdx, entry.name).call()\n        console.log(\"TEST:\", arrayLength)\n        let promiseArray = [];\n        for (let i = 0 ; i < arrayLength ; i++) {\n            promiseArray.push(this.contract.methods.getExcel(entry.folderIdx, entry.name, i).call());\n        }\n        let excelArray = await Promise.all(promiseArray);\n\t\tlet Result: ReefFile[] = [];\n        for (let i = 0 ; i < excelArray.length ; i++){\n            let tmp = {\n                uuid: excelArray[i][\"cid\"],\n                name: entry.name,\n                size: +excelArray[i][\"size\"],\n                lastModified: new Date(+excelArray[i][\"time\"] * 1000)\n            }\n            Result.push(tmp);\n        }\n        return Result;\n\t}\n\tasync downloadFile(fileUUID: string, fileName: string): Promise<void>{\n        axios({\n            url: this.base + `data/${fileUUID}/download` ,\n            method: 'GET',\n            responseType: 'blob'\n        })\n            .then((response) => {\n                const url = window.URL\n                    .createObjectURL(new Blob([response.data]));\n                const link = document.createElement('a');\n                link.href = url;\n                link.setAttribute('download', fileName);\n                document.body.appendChild(link);\n                link.click();\n                document.body.removeChild(link);\n            })\n\t}\n}"," import { Alert, AlertColor, Snackbar } from '@mui/material';\nimport {\n    ChonkyActions,\n    ChonkyFileActionData,\n    FileArray,\n    FileBrowser,\n    FileContextMenu,\n    FileList,\n    FileNavbar,\n    FileToolbar,\n    setChonkyDefaults,\n} from 'chonky';\nimport { ChonkyIconFA } from 'chonky-icon-fontawesome';\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { ReefFile, ReefFileEntry, ReefFolderV2, ReefRepositoryV2 } from '../data/ReefRepository';\n\nsetChonkyDefaults({ iconComponent: ChonkyIconFA });\n\ninterface Path {\n    index: number,\n    name: string\n}\n\ninterface Folder {\n    path: Path[],\n    index: number\n}\n\ninterface SnackBarInfo {\n    message: string,\n    severity: AlertColor\n}\n\nexport const useFolderChain = (folder: Folder, file: ReefFileEntry | null): FileArray => {\n    return useMemo(() => {\n        const folderChain: FileArray = folder.path.map((p: Path) => {\n            return {\n                id: p.index.toString(),\n                name: p.name,\n                isDir: true\n            };\n        });\n\n        if (file != null) {\n            folderChain.push({\n                id: `${file.folderIdx}/${file.name}`,\n                name: file.name + \" (History)\",\n                isDir: false\n            })\n        }\n\n        console.log(folderChain);\n        return folderChain;\n    }, [folder, file]);\n};\n\nexport const useFileActionHandler = (\n    reefRepository: ReefRepositoryV2,\n    isInFile: boolean,\n    folder: Folder,\n    setSnackbarInfo: (snackbarInfo: SnackBarInfo) => void,\n    setFolder: (folder: Folder) => void,\n    setFile: (file: ReefFileEntry | null) => void\n) => {\n    return useCallback(\n        (data: ChonkyFileActionData) => {\n            if (data.id === ChonkyActions.OpenFiles.id) {\n                const { targetFile, files } = data.payload;\n                const fileToOpen = targetFile ?? files[0];\n                console.log(fileToOpen);\n\n                if (fileToOpen) {\n                    if (fileToOpen.isDir) {\n                        // Check if going back to parent\n                        let isParent = false;\n                        for (const [i, path] of folder.path.entries()) {\n                            if (path.index.toString() === fileToOpen.id) {\n                                isParent = true;\n\n                                setFolder({\n                                    path: folder.path.slice(0, i + 1),\n                                    index: parseInt(fileToOpen.id)\n                                });\n                                setFile(null);\n                                break;\n                            }\n                        }\n\n                        // Otherwise, advance in deeper folder\n                        if (!isParent) {\n                            setFolder({\n                                path: [...folder.path, {\n                                    index: parseInt(fileToOpen.id),\n                                    name: fileToOpen.name\n                                }],\n                                index: parseInt(fileToOpen.id)\n                            });\n                            setFile(null);\n                        }\n                    } else {\n                        if (isInFile) {\n                            setSnackbarInfo({\n                                message: \"The file is now downloading...\",\n                                severity: 'info'\n                            });\n\n                            reefRepository.downloadFile(fileToOpen.id, fileToOpen.name)\n                        } else {\n                            const [idx, name] = fileToOpen.id.split(\"/\", 1);\n\n                            setFile({\n                                folderIdx: parseInt(idx),\n                                name: name\n                            });\n                        }\n                    }\n                }\n            }\n\n            console.log(data);\n        },\n        [setFolder, folder.path, setFile, isInFile, setSnackbarInfo, reefRepository]\n    );\n};\n\nexport const updateFolderFiles = (\n    reefRepository: ReefRepositoryV2,\n    folder: Folder,\n    setFolderFiles: (folderFiles: FileArray) => void,\n    setSnackbarInfo: (snackbarInfo: SnackBarInfo) => void,\n) => {\n    setFolderFiles([null]);\n\n    const subFolders = reefRepository.listFolders(folder.index);\n    const subFiles = reefRepository.listFolderFiles(folder.index);\n\n    Promise.all([subFolders, subFiles]).then((res) => {\n            const subFolders = res[0];\n            const subFiles= res[1];\n\n            const folders: FileArray = subFolders.map((subFolder: ReefFolderV2) => {\n                return {\n                    id: subFolder.folderIdx.toString(),\n                    name: subFolder.name,\n                    isDir: true\n                };\n            });\n\n            const files: FileArray = subFiles.map((subFile: ReefFileEntry) => {\n                return {\n                    id: `${subFile.folderIdx}/${subFile.name}`,\n                    name: subFile.name,\n                    isDir: false\n                };\n            });\n\n            console.log(folders.concat(files));\n            setFolderFiles(folders.concat(files));\n        })\n        .catch((err: any) => {\n            console.log(err);\n            setSnackbarInfo({\n                message: `${err}`,\n                severity: 'error'\n            });\n        });\n}\n\nexport const updateVersionFiles = (\n    reefRepository: ReefRepositoryV2,\n    file: ReefFileEntry | null,\n    setVersionFiles: (versionFiles: FileArray | null) => void,\n    setSnackbarInfo: (snackbarInfo: SnackBarInfo) => void,\n) => {\n    if (file == null) {\n        setVersionFiles(null);\n    } else {\n        setVersionFiles([null]);\n        reefRepository.listFiles(file)\n            .then((reefFiles: ReefFile[]) => {\n                const versionFiles: FileArray = reefFiles.map((reefFile: ReefFile) => {\n                    return {\n                        id: reefFile.uuid,\n                        name: reefFile.name,\n                        modDate: reefFile.lastModified,\n                        size: reefFile.size,\n                        isDir: false\n                    }\n                })\n\n                setVersionFiles(versionFiles);\n            })\n            .catch((err: any) => {\n                console.log(err);\n                setSnackbarInfo({\n                    message: `${err}`,\n                    severity: 'error'\n                });\n            });\n    }\n}\n\n\nexport const ReefBrowser: React.FC<{ instanceId: string, reefRepository: ReefRepositoryV2 }> = (props) => {\n    const [snackbarInfo, setSnackbarInfo] = useState(null as (SnackBarInfo | null));\n    \n    const [folder, setFolder] = useState({\n        path: [{\n            index: 0,\n            name: 'Root'\n        }],\n        index: 0\n    } as Folder);\n    const [file, setFile] = useState(null as (ReefFileEntry | null));\n\n    const [folderFiles, setFolderFiles] = useState([null] as FileArray);\n    useEffect(() => {\n        updateFolderFiles(props.reefRepository, folder, setFolderFiles, setSnackbarInfo);\n    }, [folder, props.reefRepository])\n\n    const [versionFiles, setVersionFiles] = useState(null as (FileArray | null));\n    useEffect(() => {\n        updateVersionFiles(props.reefRepository, file, setVersionFiles, setSnackbarInfo);\n    }, [file, props.reefRepository])\n\n    const folderChain = useFolderChain(folder, file);\n    const handleFileAction = useFileActionHandler(\n        props.reefRepository,\n        file != null,\n        folder,\n        setSnackbarInfo,\n        setFolder,\n        setFile\n    );\n    return (\n        <div style={{ height: '80vh' }}>\n            <FileBrowser\n                instanceId={props.instanceId}\n                files={versionFiles ?? folderFiles}\n                folderChain={folderChain}\n                onFileAction={handleFileAction}\n                defaultFileViewActionId={ChonkyActions.EnableListView.id}\n            >\n                <FileNavbar />\n                <FileToolbar />\n                <FileList />\n                <FileContextMenu />\n            </FileBrowser>\n\n            <Snackbar\n                open={snackbarInfo !== null}\n                autoHideDuration={3000}\n                onClose={() => { setSnackbarInfo(null) }}\n                ClickAwayListenerProps={{onClickAway: () => {}}}\n            >\n                <Alert\n                    onClose={() => { setSnackbarInfo(null) }}\n                    severity={snackbarInfo?.severity}\n                    sx={{ width: '100%' }}\n                >\n                    {snackbarInfo?.message}\n                </Alert>\n            </Snackbar>\n        </div>\n    );\n};","import { ReefRepositoryV2Implement } from './data/ReefRepositoryV2Implement'\nimport { AppBar, Box, Toolbar, IconButton, Typography } from '@mui/material';\nimport GrassIcon from '@mui/icons-material/Grass';\nimport { ReefBrowser } from './components/ReefBrowser';\n\nfunction App() {\n  // let repository = new ReefRepositoryImplement()\n  let repository = new ReefRepositoryV2Implement()\n  return (\n    <Box sx={{ flexGrow: 1 }}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton\n            size=\"large\"\n            edge=\"start\"\n            color=\"inherit\"\n            aria-label=\"menu\"\n            sx={{ mr: 2 }}\n          >\n            <GrassIcon />\n          </IconButton>\n          <Typography variant=\"h6\" component=\"div\" sx={{ flexGrow: 1 }}>\n            Reef Blockchain Explorer\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <div style={{ padding: 32 }}>\n        <ReefBrowser instanceId=\"reef-browser\" reefRepository={repository}  />\n      </div>\n    </Box>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport { setChonkyDefaults } from 'chonky';\nimport { ChonkyIconFA } from 'chonky-icon-fontawesome';\n\nsetChonkyDefaults({ iconComponent: ChonkyIconFA });\n\nconst root = ReactDOM.createRoot(\n  document.getElementById('root') as HTMLElement\n);\nroot.render(\n  <App />\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}