{"version":3,"sources":["data/ReefRepositoryImplement.ts","components/ReefBrowser.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ReefRepositoryImplement","contractAddr","web3","contract","nameResult","nameLength","detail","detailLength","this","Web3","eth","Contract","contractABI","methods","getExcelArrayLength","call","arrayLength","promiseArray","i","push","getExcelArrayItem","Promise","all","nameArray","getExcelMapItem","attrArray","tmp","path","name","size","lastModified","Date","folderName","getexcelMapLength","tmpArray","uuid","fileUUID","fileName","axios","url","method","responseType","then","response","window","URL","createObjectURL","Blob","data","link","document","createElement","href","setAttribute","body","appendChild","click","removeChild","setChonkyDefaults","iconComponent","ChonkyIconFA","InitFolderMap","id","isDir","ReefBrowser","props","useState","snackbarInfo","setSnackbarInfo","folderPath","setFolderPath","setFolderName","folderMap","setFolderMap","useEffect","reefRepository","listFolders","reefFolders","children","forEach","reefFolder","length","charAt","slice","lastIndexOf","parent","modDate","catch","err","message","severity","initializeFolderMap","folderFiles","useMemo","currentFolder","map","useFolderFiles","versionFiles","setVersionFiles","listFiles","reefFiles","reefFile","updateVersionFiles","folderChain","pathChain","useFolderChain","handleFileAction","isInFile","useCallback","ChonkyActions","OpenFiles","payload","targetFile","files","fileToOpen","downloadFile","console","log","useFileActionHandler","style","height","instanceId","onFileAction","defaultFileViewActionId","EnableListView","Snackbar","open","autoHideDuration","onClose","ClickAwayListenerProps","onClickAway","Alert","sx","width","App","repository","Box","flexGrow","AppBar","position","Toolbar","IconButton","edge","color","mr","Typography","variant","component","padding","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render"],"mappings":"+lHAOaA,EAAb,WAQI,aAAe,yBAPfC,aAAe,6CAOD,KANdC,UAMc,OALdC,cAKc,OAJdC,WAA2B,GAIb,KAHdC,WAAa,EAGC,KAFdC,OAAyC,GAE3B,KADdC,aAA2C,GAEvCC,KAAKN,KAAO,IAAIO,IAAK,sEACrBD,KAAKL,SAAW,IAAIK,KAAKN,KAAKQ,IAAIC,SAAUC,EAA0BJ,KAAKP,cAVnF,gGAaI,mHAEIO,KAAKH,WAAa,EAFtB,SAK4BG,KAAKL,SAASU,QAAQC,sBAAsBC,OALxE,OAOI,IAFIC,EALR,OAMQC,EAAe,GACVC,EAAIV,KAAKH,WAAYa,GAAKF,EAAc,EAAGE,IAChDD,EAAaE,KAAKX,KAAKL,SAASU,QAAQO,kBAAkBF,GAAGH,QARrE,gBAU0BM,QAAQC,IAAIL,GAVtC,OAYI,IAFIM,EAVR,OAWIN,EAAe,GACNC,EAAIV,KAAKH,WAAYa,GAAKF,EAAc,EAAGE,IAEhDD,EAAaE,KAAKX,KAAKL,SAASU,QAAQW,gBAAgBD,EAAUL,GAAV,KAAqB,GAAGH,QAdxF,iBAgB0BM,QAAQC,IAAIL,GAhBtC,QAiBI,IADIQ,EAhBR,OAiBaP,EAAIV,KAAKH,WAAYa,GAAKF,EAAc,EAAGE,IAC5CQ,EAAM,CACNC,KAAMJ,EAAUL,EAAIV,KAAKH,YAAnB,KACNuB,KAAML,EAAUL,EAAIV,KAAKH,YAAnB,KACNwB,MAAOJ,EAAUP,EAAIV,KAAKH,YAAnB,KACPyB,aAAc,IAAIC,KAA+C,KAAzCN,EAAUP,EAAIV,KAAKH,YAAnB,OAE5BG,KAAKJ,WAAWe,KAAKO,GAxB7B,OA2BIlB,KAAKH,WAAaW,EA3BtB,kBA4BWR,KAAKJ,YA5BhB,iDAbJ,8HA4CI,WAAgB4B,GAAhB,kGAEIxB,KAAKD,aAAayB,GAAc,EAFpC,SAI4BxB,KAAKL,SAASU,QAAQoB,kBAAkBD,GAAYjB,OAJhF,OAOI,IAHIC,EAJR,OAMQC,EAAe,GACVC,EAAIV,KAAKD,aAAayB,GAAad,GAAKF,EAAc,EAAGE,IAC9DD,EAAaE,KAAKX,KAAKL,SAASU,QAAQW,gBAAgBQ,EAAYd,GAAGH,QAR/E,gBAUyBM,QAAQC,IAAIL,GAVrC,OAYI,IAFIiB,EAVR,OAYahB,EAAIV,KAAKD,aAAayB,GAAcd,GAAKF,EAAc,EAAGE,IAC3DQ,EAAM,CACNS,KAAMD,EAAShB,EAAIV,KAAKD,aAAayB,IAA/B,IACNJ,KAAMI,EACNH,MAAOK,EAAShB,EAAIV,KAAKD,aAAayB,IAA/B,KACPF,aAAc,IAAIC,KAA4D,KAAtDG,EAAShB,EAAIV,KAAKD,aAAayB,IAA/B,OAEU,IAAlCxB,KAAKD,aAAayB,KAClBxB,KAAKF,OAAO0B,GAAc,IAC9BxB,KAAKF,OAAO0B,GAAYb,KAAKO,GArBrC,OAwBIlB,KAAKD,aAAayB,GAAchB,EAxBpC,kBAyBWR,KAAKF,OAAO0B,IAzBvB,iDA5CJ,kIAwEI,WAAmBI,EAAkBC,GAArC,2EACIC,IAAM,CACFC,IAAK,wBAA0BH,EAC/BI,OAAQ,MACRC,aAAc,SAEbC,MAAK,SAACC,GACD,IAAMJ,EAAMK,OAAOC,IACZC,gBAAgB,IAAIC,KAAK,CAACJ,EAASK,QACpCC,EAAOC,SAASC,cAAc,KACpCF,EAAKG,KAAOb,EACZU,EAAKI,aAAa,WAAYhB,GAC9Ba,SAASI,KAAKC,YAAYN,GAC1BA,EAAKO,QACLN,SAASI,KAAKG,YAAYR,MAdxC,2CAxEJ,gE,gHCUAS,YAAkB,CAAEC,cAAeC,MAWnC,IAAMC,EAA2B,CAC7B,IAAK,CACDC,GAAI,IACJlC,KAAM,OACNmC,OAAO,IAuKFC,EAAgF,SAACC,GAC1F,MAAwCC,mBAAS,MAAjD,mBAAOC,EAAP,KAAqBC,EAArB,KAEA,EAAoCF,mBAAS,KAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KACA,EAAoCJ,mBAAS,MAA7C,mBAAOlC,EAAP,KAAmBuC,EAAnB,KAEA,EAAkCL,mBAASL,GAA3C,mBAAOW,EAAP,KAAkBC,EAAlB,KACAC,qBAAU,YAnGqB,SAC/BC,EACAF,EACAL,GAEAO,EAAeC,cACVlC,MAAK,SAACmC,GACH,IAAML,EAAuB,CACzB,IAAK,CACDV,GAAI,IACJlC,KAAM,OACNmC,OAAO,EACPe,SAAU,KAIlBD,EAAYE,SAAQ,SAACC,GACjB,IAD6C,IAAD,EACnC9D,EAAI,EAAGA,GAAK8D,EAAWrD,KAAKsD,SAAU/D,EAC3C,GAAIA,IAAM8D,EAAWrD,KAAKsD,QAAwC,MAA9BD,EAAWrD,KAAKuD,OAAOhE,GAAY,CACnE,IAKqB,EALfS,EAAOqD,EAAWrD,KAAKwD,MAAM,EAAGjE,GAChCU,EAAOD,EAAKwD,MAAMxD,EAAKyD,YAAY,KAAO,GAC1CC,EAAmC,IAA1B1D,EAAKyD,YAAY,KAAY,IAC5BzD,EAAKwD,MAAM,EAAGxD,EAAKyD,YAAY,MAE3CzD,EAAKsD,OAAS,IACd,UAAAT,EAAUa,GAAQP,gBAAlB,SAA4B3D,KAAKQ,GACjC6C,EAAU7C,GAAQ,CACdmC,GAAInC,EACJC,KAAMA,EACNkD,SAAU,GACVf,OAAO,IAMvB,IAAMpC,EAAOqD,EAAWrD,KAAO,IAAMqD,EAAWpD,KAChD,UAAA4C,EAAUQ,EAAWrD,MAAMmD,gBAA3B,SAAqC3D,KAAKQ,GAC1C6C,EAAU7C,GAAQ,CACdmC,GAAInC,EACJC,KAAMoD,EAAWpD,KACjB0D,QAASN,EAAWlD,aACpBD,KAAMmD,EAAWnD,KACjBkC,OAAO,MAIfU,EAAaD,MAEhBe,OAAM,SAACC,GACJpB,EAAgB,CACZqB,QAASD,EACTE,SAAU,aAgDlBC,CAAoB1B,EAAMU,eAAgBF,EAAcL,KACzD,CAACH,EAAMU,iBAEV,IAAMiB,EA9KoB,SAACvB,EAAoBG,GAC/C,OAAOqB,mBAAQ,WACX,IAAMC,EAAgBtB,EAAUH,GAKhC,OAJcyB,EAAchB,SACtBgB,EAAchB,SAASiB,KAAI,SAACjB,GAAD,OAAsBN,EAAUM,MAC5C,MAAfT,EAAoB,CAAC,MAAO,KAGnC,CAACA,EAAYG,IAsKIwB,CAAe3B,EAAYG,GAE/C,EAAwCN,mBAAS,MAAjD,mBAAO+B,EAAP,KAAqBC,EAArB,KACAxB,qBAAU,YAhDoB,SAC9BC,EACA3C,EACAkE,EACA9B,GAEkB,MAAdpC,EACAkE,EAAgB,OAEhBA,EAAgB,CAAC,OACjBvB,EAAewB,UAAUnE,GACpBU,MAAK,SAAC0D,GACH,IAAMH,EAA0BG,EAAUL,KAAI,SAACM,GAC3C,MAAO,CACHvC,GAAIuC,EAASlE,KACbP,KAAMyE,EAASzE,KACf0D,QAASe,EAASvE,aAClBD,KAAMwE,EAASxE,KACfkC,OAAO,MAIfmC,EAAgBD,MAEnBV,OAAM,SAACC,GACJpB,EAAgB,CACZqB,QAASD,EACTE,SAAU,cAsBtBY,CAAmBrC,EAAMU,eAAgB3C,EAAYkE,EAAiB9B,KACvE,CAACpC,EAAYiC,EAAMU,iBAEtB,IAAM4B,EA1KoB,SAAClC,EAAoBrC,EAA2BwC,GAC1E,OAAOqB,mBAAQ,WACX,IAAMW,EAAY,CAAC,KAEnB,GAAmB,MAAfnC,EACA,IAAK,IAAInD,EAAI,EAAGA,GAAKmD,EAAWY,SAAU/D,EAClCA,IAAMmD,EAAWY,QAAmC,MAAzBZ,EAAWa,OAAOhE,IAC7CsF,EAAUrF,KAAKkD,EAAWc,MAAM,EAAGjE,IAK/C,IAAMqF,EAAcC,EAAUT,KAAI,SAACpE,GAAD,OAAkB6C,EAAU7C,MAQ9D,OANkB,MAAdK,GACAuE,EAAYpF,KAAK,CACb2C,GAAIO,EAAa,IAAMrC,EACvBJ,KAAMI,EAAa,yBAGpBuE,IACR,CAAClC,EAAYrC,EAAYwC,IAqJRiC,CAAepC,EAAYrC,EAAYwC,GACrDkC,EAnJ0B,SAChC/B,EACAgC,EACAvC,EACAE,EACAC,GAEA,OAAOqC,uBACH,SAAC5D,GACG,GAAIA,EAAKc,KAAO+C,IAAcC,UAAUhD,GAAI,CACxC,MAA8Bd,EAAK+D,QAA3BC,EAAR,EAAQA,WAAYC,EAApB,EAAoBA,MACdC,EAAU,OAAGF,QAAH,IAAGA,IAAcC,EAAM,GACnCC,IACIA,EAAWnD,OACXO,EAAc4C,EAAWpD,IACzBS,EAAc,OAEVoC,GACAvC,EAAgB,CACZqB,QAAS,iCACTC,SAAU,SAEdf,EAAewC,aAAaD,EAAWpD,GAAIoD,EAAWtF,OAEtD2C,EAAc2C,EAAWtF,OAMzCwF,QAAQC,IAAIrE,KAEhB,CAACsB,EAAeC,EAAeoC,EAAUhC,EAAgBP,IAmHpCkD,CACrBrD,EAAMU,eACQ,MAAd3C,EACAoC,EACAE,EACAC,GAGJ,OACI,sBAAKgD,MAAO,CAAEC,OAAQ,QAAtB,UACI,eAAC,IAAD,CACIC,WAAYxD,EAAMwD,WAClBR,MAAK,OAAEhB,QAAF,IAAEA,IAAgBL,EACvBW,YAAaA,EACbmB,aAAchB,EACdiB,wBAAyBd,IAAce,eAAe9D,GAL1D,UAOI,cAAC,IAAD,IACA,cAAC,IAAD,IACA,cAAC,IAAD,IACA,cAAC,IAAD,OAGJ,cAAC+D,EAAA,EAAD,CACIC,KAAuB,OAAjB3D,EACN4D,iBAAkB,IAClBC,QAAS,WAAQ5D,EAAgB,OACjC6D,uBAAwB,CAACC,YAAa,cAJ1C,SAMI,cAACC,EAAA,EAAD,CACIH,QAAS,WAAQ5D,EAAgB,OACjCsB,SAAQ,OAAEvB,QAAF,IAAEA,OAAF,EAAEA,EAAcuB,SACxB0C,GAAI,CAAEC,MAAO,QAHjB,gBAKKlE,QALL,IAKKA,OALL,EAKKA,EAAcsB,gBChNpB6C,MAtCf,WAEE,IAAIC,EAAa,IAAIvI,EAWrB,OACE,eAACwI,EAAA,EAAD,CAAKJ,GAAI,CAAEK,SAAU,GAArB,UACE,cAACC,EAAA,EAAD,CAAQC,SAAS,SAAjB,SACE,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CACEhH,KAAK,QACLiH,KAAK,QACLC,MAAM,UACN,aAAW,OACXX,GAAI,CAAEY,GAAI,GALZ,SAOE,cAAC,IAAD,MAEF,cAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,UAAU,MAAMf,GAAI,CAAEK,SAAU,GAAzD,2CAKJ,qBAAKlB,MAAO,CAAE6B,QAAS,IAAvB,SACE,cAAC,EAAD,CAAa3B,WAAW,eAAe9C,eAAgB4D,UCxBhDc,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqB7G,MAAK,YAAkD,IAA/C8G,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCAd5F,YAAkB,CAAEC,cAAeC,MAEtBiG,IAASC,WACpB5G,SAAS6G,eAAe,SAErBC,OACH,cAAC,EAAD,KAMFX,M","file":"static/js/main.eb0cf56d.chunk.js","sourcesContent":["import { ReefFile, ReefFolder, ReefRepository } from \"./ReefRepository\";\nimport { AbiItem } from 'web3-utils'\nimport Web3 from 'web3';\nimport { Contract } from \"web3-eth-contract\"\nimport contractABI from './abi.json'\nimport axios from 'axios';\n\nexport class ReefRepositoryImplement implements ReefRepository {\n    contractAddr = \"0x5308132eb6826ef1fcc8b1f1f31f0675bc8fc646\"\n    web3: Web3;\n    contract: Contract;\n    nameResult: ReefFolder[] = [];\n    nameLength = 0;\n    detail: { [name: string]: ReefFile[] } = {};\n    detailLength: { [name: string]: number } = {};\n    constructor() {\n        this.web3 = new Web3('wss://eth-goerli.g.alchemy.com/v2/1EUEe6ifJGvzlvwhRRhla2d0nAg5ZIvu');\n        this.contract = new this.web3.eth.Contract( contractABI as AbiItem[], this.contractAddr);\n    }\n    \n    async listFolders(): Promise<ReefFolder[]> {\n        // reset memory data\n        this.nameLength = 0\n        \n        \n        let arrayLength = await this.contract.methods.getExcelArrayLength().call()\n        let promiseArray = [];\n        for (let i = this.nameLength; i <= arrayLength - 1; i++) {\n            promiseArray.push(this.contract.methods.getExcelArrayItem(i).call());\n        }\n        let nameArray = await Promise.all(promiseArray);\n        promiseArray = [];\n        for (let i = this.nameLength; i <= arrayLength - 1; i++){\n            // console.log(nameArray[0][\"name\"]);\n            promiseArray.push(this.contract.methods.getExcelMapItem(nameArray[i][\"name\"],0).call());\n        }\n        let attrArray = await Promise.all(promiseArray);\n        for (let i = this.nameLength; i <= arrayLength - 1; i++){\n            let tmp = {\n                path: nameArray[i - this.nameLength][\"path\"],\n                name: nameArray[i - this.nameLength][\"name\"],\n                size: +attrArray[i - this.nameLength][\"size\"],\n                lastModified: new Date(+attrArray[i - this.nameLength][\"time\"] * 1000)\n            }\n            this.nameResult.push(tmp);\n        }\n        // console.log(this.nameResult);\n        this.nameLength = arrayLength;\n        return this.nameResult;\n    }\n\n    async listFiles(folderName: string): Promise<ReefFile[]> {\n        // reset memory data\n        this.detailLength[folderName] = 0;\n        \n        let arrayLength = await this.contract.methods.getexcelMapLength(folderName).call()\n\n        let promiseArray = [];\n        for (let i = this.detailLength[folderName]; i <= arrayLength - 1; i++) {\n            promiseArray.push(this.contract.methods.getExcelMapItem(folderName, i).call());\n        }\n        let tmpArray = await Promise.all(promiseArray);\n\n        for (let i = this.detailLength[folderName] ; i <= arrayLength - 1; i++){\n            let tmp = {\n                uuid: tmpArray[i - this.detailLength[folderName]][\"cid\"],\n                name: folderName,\n                size: +tmpArray[i - this.detailLength[folderName]][\"size\"],\n                lastModified: new Date(+tmpArray[i - this.detailLength[folderName]][\"time\"] * 1000)\n            }\n            if (this.detailLength[folderName] === 0)\n                this.detail[folderName] = [];    \n            this.detail[folderName].push(tmp);\n        }\n        // console.log(this.detail[folderName]);\n        this.detailLength[folderName] = arrayLength;\n        return this.detail[folderName];\n    }\n\n    async downloadFile(fileUUID: string, fileName: string): Promise<void> {\n        axios({\n            url: 'https://ipfs.io/ipfs/' + fileUUID,\n            method: 'GET',\n            responseType: 'blob'\n      })\n            .then((response) => {\n                  const url = window.URL\n                        .createObjectURL(new Blob([response.data]));\n                  const link = document.createElement('a');\n                  link.href = url;\n                  link.setAttribute('download', fileName);\n                  document.body.appendChild(link);\n                  link.click();\n                  document.body.removeChild(link);\n            })\n    }\n    \n}\n"," import { Alert, AlertColor, Snackbar } from '@mui/material';\nimport {\n    ChonkyActions,\n    ChonkyFileActionData,\n    FileArray,\n    FileBrowser,\n    FileContextMenu,\n    FileData,\n    FileList,\n    FileNavbar,\n    FileToolbar,\n    setChonkyDefaults,\n} from 'chonky';\nimport { ChonkyIconFA } from 'chonky-icon-fontawesome';\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { ReefFile, ReefFolder, ReefRepository } from '../data/ReefRepository';\n\nsetChonkyDefaults({ iconComponent: ChonkyIconFA });\n\ninterface FolderMap {\n    [folderPath: string]: FileData & { children?: string[], fileUUID?: string };\n}\n\ninterface SnackBarInfo {\n    message: string,\n    severity: AlertColor\n}\n\nconst InitFolderMap: FolderMap = {\n    \"/\": {\n        id: \"/\",\n        name: \"Root\",\n        isDir: true\n    }\n}\n\nexport const useFolderFiles = (folderPath: string, folderMap: FolderMap): FileArray => {\n    return useMemo(() => {\n        const currentFolder = folderMap[folderPath];\n        const files = currentFolder.children\n            ? currentFolder.children.map((children: string) => folderMap[children])\n            : folderPath === \"/\"? [null]: [];\n        \n        return files;\n    }, [folderPath, folderMap]);\n};\n\nexport const useFolderChain = (folderPath: string, folderName: string | null, folderMap: FolderMap): FileArray => {\n    return useMemo(() => {\n        const pathChain = [\"/\"];\n\n        if (folderPath !== \"/\") {\n            for (let i = 1; i <= folderPath.length; ++i) {\n                if (i === folderPath.length || folderPath.charAt(i) === '/') {\n                    pathChain.push(folderPath.slice(0, i))\n                }\n            }\n        }\n\n        const folderChain = pathChain.map((path: string) => folderMap[path]);\n\n        if (folderName != null) {\n            folderChain.push({\n                id: folderPath + \"/\" + folderName,\n                name: folderName + \" (Multiple Versions)\"\n            })\n        }\n        return folderChain;\n    }, [folderPath, folderName, folderMap]);\n};\n\nexport const useFileActionHandler = (\n    reefRepository: ReefRepository,\n    isInFile: boolean,\n    setSnackbarInfo: (snackbarInfo: SnackBarInfo) => void,\n    setFolderPath: (folderPath: string) => void,\n    setFolderName: (folderName: string | null) => void\n) => {\n    return useCallback(\n        (data: ChonkyFileActionData) => {\n            if (data.id === ChonkyActions.OpenFiles.id) {\n                const { targetFile, files } = data.payload;\n                const fileToOpen = targetFile ?? files[0];\n                if (fileToOpen) {\n                    if (fileToOpen.isDir) {\n                        setFolderPath(fileToOpen.id);\n                        setFolderName(null);\n                    } else {\n                        if (isInFile) {\n                            setSnackbarInfo({\n                                message: \"The file is now downloading...\",\n                                severity: 'info'\n                            });\n                            reefRepository.downloadFile(fileToOpen.id, fileToOpen.name)\n                        } else {\n                            setFolderName(fileToOpen.name);\n                        }\n                    }\n                }\n            }\n\n            console.log(data);\n        },\n        [setFolderPath, setFolderName, isInFile, reefRepository, setSnackbarInfo]\n    );\n};\n\nexport const initializeFolderMap = (\n    reefRepository: ReefRepository,\n    setFolderMap: (folderMap: FolderMap) => void,\n    setSnackbarInfo: (snackbarInfo: SnackBarInfo) => void,\n) => {\n    reefRepository.listFolders()\n        .then((reefFolders: ReefFolder[]) => {\n            const folderMap: FolderMap = {\n                \"/\": {\n                    id: \"/\",\n                    name: \"Root\",\n                    isDir: true,\n                    children: []\n                }\n            }\n\n            reefFolders.forEach((reefFolder: ReefFolder) => {\n                for (let i = 0; i <= reefFolder.path.length; ++i) {\n                    if (i === reefFolder.path.length || reefFolder.path.charAt(i) === '/') {\n                        const path = reefFolder.path.slice(0, i);\n                        const name = path.slice(path.lastIndexOf(\"/\") + 1);\n                        const parent = path.lastIndexOf(\"/\") === 0? \"/\":\n                                        path.slice(0, path.lastIndexOf(\"/\"));\n\n                        if (path.length > 0) {\n                            folderMap[parent].children?.push(path);\n                            folderMap[path] = {\n                                id: path,\n                                name: name,\n                                children: [],\n                                isDir: true\n                            }\n                        }\n                    }\n                }\n                \n                const path = reefFolder.path + \"/\" + reefFolder.name;\n                folderMap[reefFolder.path].children?.push(path);\n                folderMap[path] = {\n                    id: path,\n                    name: reefFolder.name,\n                    modDate: reefFolder.lastModified,\n                    size: reefFolder.size,\n                    isDir: false\n                }\n            });\n\n            setFolderMap(folderMap);\n        })\n        .catch((err: any) => {\n            setSnackbarInfo({\n                message: err,\n                severity: 'error'\n            });\n        });\n}\n\n\nexport const updateVersionFiles = (\n    reefRepository: ReefRepository,\n    folderName: string | null,\n    setVersionFiles: (versionFiles: FileArray | null) => void,\n    setSnackbarInfo: (snackbarInfo: SnackBarInfo) => void,\n) => {\n    if (folderName == null) {\n        setVersionFiles(null);\n    } else {\n        setVersionFiles([null]);\n        reefRepository.listFiles(folderName)\n            .then((reefFiles: ReefFile[]) => {\n                const versionFiles: FileArray = reefFiles.map((reefFile: ReefFile) => {\n                    return {\n                        id: reefFile.uuid,\n                        name: reefFile.name,\n                        modDate: reefFile.lastModified,\n                        size: reefFile.size,\n                        isDir: false\n                    }\n                })\n\n                setVersionFiles(versionFiles);\n            })\n            .catch((err: any) => {\n                setSnackbarInfo({\n                    message: err,\n                    severity: 'error'\n                });\n            });\n    }\n}\n\n\nexport const ReefBrowser: React.FC<{ instanceId: string, reefRepository: ReefRepository }> = (props) => {\n    const [snackbarInfo, setSnackbarInfo] = useState(null as (SnackBarInfo | null));\n    \n    const [folderPath, setFolderPath] = useState(\"/\");\n    const [folderName, setFolderName] = useState(null as (string | null));\n\n    const [folderMap, setFolderMap] = useState(InitFolderMap);\n    useEffect(() => {\n        initializeFolderMap(props.reefRepository, setFolderMap, setSnackbarInfo);\n    }, [props.reefRepository]);\n\n    const folderFiles = useFolderFiles(folderPath, folderMap);\n\n    const [versionFiles, setVersionFiles] = useState(null as (FileArray | null));\n    useEffect(() => {\n        updateVersionFiles(props.reefRepository, folderName, setVersionFiles, setSnackbarInfo);\n    }, [folderName, props.reefRepository])\n\n    const folderChain = useFolderChain(folderPath, folderName, folderMap);\n    const handleFileAction = useFileActionHandler(\n        props.reefRepository,\n        folderName != null,\n        setSnackbarInfo,\n        setFolderPath,\n        setFolderName\n    );\n    \n    return (\n        <div style={{ height: '80vh' }}>\n            <FileBrowser\n                instanceId={props.instanceId}\n                files={versionFiles ?? folderFiles}\n                folderChain={folderChain}\n                onFileAction={handleFileAction}\n                defaultFileViewActionId={ChonkyActions.EnableListView.id}\n            >\n                <FileNavbar />\n                <FileToolbar />\n                <FileList />\n                <FileContextMenu />\n            </FileBrowser>\n\n            <Snackbar\n                open={snackbarInfo !== null}\n                autoHideDuration={3000}\n                onClose={() => { setSnackbarInfo(null) }}\n                ClickAwayListenerProps={{onClickAway: () => {}}}\n            >\n                <Alert\n                    onClose={() => { setSnackbarInfo(null) }}\n                    severity={snackbarInfo?.severity}\n                    sx={{ width: '100%' }}\n                >\n                    {snackbarInfo?.message}\n                </Alert>\n            </Snackbar>\n        </div>\n    );\n};","import { ReefRepositoryImplement } from './data/ReefRepositoryImplement'\nimport { ReefRepositoryV2Implement } from './data/ReefRepositoryV2Implement'\nimport { AppBar, Box, Toolbar, IconButton, Typography } from '@mui/material';\nimport GrassIcon from '@mui/icons-material/Grass';\nimport { ReefBrowser } from './components/ReefBrowser';\n\nfunction App() {\n  // let repositoryV2 = new ReefRepositoryV2Implement()\n  let repository = new ReefRepositoryImplement()\n  // repositoryV2.listFolders(0).then(Re => { \n  //   console.log(\"DEBUG1:\", Re)\n  // });\n  // repositoryV2.listFolderFiles(1).then(entry => { \n  //   console.log(\"DEBUG2:\", entry[0])\n  //   repositoryV2.listFiles(entry[0]).then(Re => {\n  //     console.log(\"DEBUG3:\", Re)\n  //   });\n  // })\n  // repository.downloadFile(\"bafkreicknvcu3c2dzvdxfi4qytm7xpoozw3fzzbyxieoo3dami244w6rsm\", \"test.ods\");\n  return (\n    <Box sx={{ flexGrow: 1 }}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton\n            size=\"large\"\n            edge=\"start\"\n            color=\"inherit\"\n            aria-label=\"menu\"\n            sx={{ mr: 2 }}\n          >\n            <GrassIcon />\n          </IconButton>\n          <Typography variant=\"h6\" component=\"div\" sx={{ flexGrow: 1 }}>\n            Reef Blockchain Explorer\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <div style={{ padding: 32 }}>\n        <ReefBrowser instanceId=\"reef-browser\" reefRepository={repository}  />\n      </div>\n    </Box>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport { setChonkyDefaults } from 'chonky';\nimport { ChonkyIconFA } from 'chonky-icon-fontawesome';\n\nsetChonkyDefaults({ iconComponent: ChonkyIconFA });\n\nconst root = ReactDOM.createRoot(\n  document.getElementById('root') as HTMLElement\n);\nroot.render(\n  <App />\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}